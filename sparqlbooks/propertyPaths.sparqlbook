[
  {
    "kind": 2,
    "language": "sparql",
    "value": "PREFIX : <http://looneytunes-graph.com/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\n# 1. Inverse paths\nSELECT ?c ?p\nWHERE {\n\t?p ^:created_by ?c\n}\n\n# 2. Sequence paths\nSELECT ?c1 ?c2\nWHERE {\n\t?c1 :enemy_of/:reval_of ?c2\n}\n\n# 3. To find the names of the start and end nodes, via the inverse of the path :rival_of followed by the inverse of the path :enemy_of\n# insert data\nINSERT DATA {\n\t:Daffy_Duck :rival_of :Bugs_Bunny .\n  \t:Taz :enemy_of :Daffy_Duck .\n}\n# find names\nSELECT ?c1n ?c2n\nWHERE {\n\t?c1 ^:rival_of/^:enemy_of ?c2 .\n  ?c1 :name ?c1n .\n  ?c2 :name ?c2n .\n}\n\n# 4. Recursive paths\n# insert data\nINSERT DATA {\n\t:Bugs_Bunny :knows :Daffy_Duck .\n  \t:Daffy_Duck :knows :Sylvester .\n\t:Sylvester :knows :Taz .\n}\n# who knows Taz (directly or transitively) through zero or more\nSELECT ?c\nWHERE {\n\t?c :knows* :Taz\n}\n# more then one of :knows\nSELECT ?c\nWHERE {\n\t?c :knows+ :Taz\n}\n\n# 5. What are the possible paths I can take between two nodes?\nSELECT ?subject ?predicate ?object\nWHERE {\n  VALUES ?start { :Bugs_Bunny }\n  VALUES ?end { :Daffy_Duck }\n \n  ?start (:|!:)* ?subject .\n  ?subject ?predicate ?object .\n  ?object (:|!:)* ?end\n}"
  }
]