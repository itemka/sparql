[
  {
    "kind": 2,
    "language": "sparql",
    "value": "PREFIX : <http://looneytunes-graph.com/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\n# 1. Select all\nSELECT ?s ?p ?o\nWHERE {\n  ?s ?p ?o\n}\n\n# 2. Select all with limit\nSELECT *\nWHERE {\n  ?s ?p ?o\n}\nLIMIT 20\n\n# 3. Bugs_Bunny name\nSELECT ?n\nWHERE {\n  :Bugs_Bunny :name ?n\n}\n\n# 4. The name of the creator of the Bugs_Bunny\nSELECT ?n\nWHERE {\n  :Bugs_Bunny :created_by ?p .\n  ?p :name ?n\n}\n\n# 5. debut release date for Looney_Tunes_Character\nSELECT ?n ?d\nWHERE {\n  ?c a :Looney_Tunes_Character;\n    :name ?n ;\n    :made_debut_appearance_in ?m .\n  ?m :release_date ?d\n}\n\n# 6. Character created by Tex_Avery\nSELECT ?n\nWHERE {\n\t?c :created_by :Tex_Avery .\n  ?c :name ?n\n}\n\n# 7. How many Character created by Tex_Avery (COUNT (?var) AS ?constName)\nSELECT (COUNT (?c) AS ?createdCount)\nWHERE {\n\t?c :created_by :Tex_Avery\n}\n\n# 8. How many types of movies has Looney_Tunes_Character WITHOUT DUPLLICATION (DISTINCT)\nSELECT (COUNT (DISTINCT ?mt) as ?movieType)\nWHERE {\n\t?c :made_debut_appearance_in ?m .\n  ?m a ?mt\n}\n\n# 9. Looney_Tunes_Character doesn't have known_for_catchphrase (FILTER EXISTS / FILTER NOT EXISTS)\nSELECT ?c ?n\nWHERE {\n\t?c a :Looney_Tunes_Character ;\n    :name ?n .\n\n  FILTER NOT EXISTS {\n\t  ?c :known_for_catchphrase ?kc\n  }\n}\n\n# 10. Who are characters who were co-character (FILTER with !=)\nSELECT DISTINCT ?c\nWHERE {\n  ?c :created_by ?p1 , ?p2 .\n  \n  FILTER (?p1 != ?p2)\n}\n\n# 11. What are the earliest and latest release dates of the Short movies? (MIN / MAX)\nSELECT (MIN (?date) as ?earliest) (MAX (?date) as ?latest)\nWHERE {\n\t?m a :Short ;\n    :release_date ?date\n}\n\n# 12. The list of the lifespan of each Looney Tunes character creator (BIND)\nSELECT DISTINCT ?cbn ?age\nWHERE {\n  ?c a :Looney_Tunes_Character ;\n     :created_by ?cb .\n  ?cb :name ?cbn ;\n      :born_on ?b ;\n      :died_on ?d .\n  BIND (year(?d) AS ?dYear) .\n  BIND (year(?b) AS ?bYear) .\n  BIND (?dYear - ?bYear AS ?age)\n}\n\n# 13. Who was the longest living character creator? (ORDER BY DESC/ASC)\nSELECT DISTINCT ?cbn ?age\nWHERE {\n  ?c a :Looney_Tunes_Character ;\n     :created_by ?cb .\n  ?cb :name ?cbn ;\n      :born_on ?b ;\n      :died_on ?d .\n  BIND (year(?d) AS ?dYear) .\n  BIND (year(?b) AS ?bYear) .\n  BIND (?dYear - ?bYear AS ?age)\n}\nORDER BY DESC(?age)\nLIMIT 1\n\n# 14. Averaging age values of Looney Tunes character creators (AVG)\nSELECT (AVG(?age) AS ?avgAge)\nWHERE {\n  ?cb :born_on ?b ;\n      :died_on ?d .\n  BIND (year(?d) AS ?dYear) .\n  BIND (year(?b) AS ?bYear) .\n  BIND (?dYear - ?bYear AS ?age)\n}\n\n# 15. Running tests: More advanced use of BIND, with IF\nSELECT ?n ?result\nWHERE {\n ?c :made_debut_appearance_in ?m ;\n    :name ?n .\n ?m :release_date ?d .\n  \n  BIND (year(?d) as ?dYear)\n  \n  BIND (\n    IF(?dYear >= 1946 && ?dYear <= 1950, \"Release during post-war\",\n      IF(?dYear >= 1939 && ?dYear <= 1945, \"Release during WW2\",\n        IF (?dYear >= 1918 && ?dYear <= 1938, \"Release during interwar period\",\n          \"Other era\"\n        )\n      )\n    ) AS ?result\n  )\n}\nORDER BY ASC(?n)\n\n# 16. Running tests: More advanced use of BIND, with COALESCE and IF\nSELECT ?n ?result\nWHERE {\n ?c :made_debut_appearance_in ?m ;\n    :name ?n .\n ?m :release_date ?d .\n  \n  BIND (year(?d) as ?dYear)\n  \n  BIND (\n    COALESCE(\n      IF(?dYear >= 1946 && ?dYear <= 1950, \"Release during post-war\", 1/0),\n      IF(?dYear >= 1939 && ?dYear <= 1945, \"Release during WW2\", 1/0),\n      IF (?dYear >= 1918 && ?dYear <= 1938, \"Release during interwar period\", 1/0),\n   \t  \"Other era\"\n    ) AS ?result\n  )\n}\nORDER BY ASC(?n)\n\n# 17. Compose and run a SPARQL query to test whether the birth year values of the Looney Tunes character creators fall within pre-defined ranges.\n# For each creator, if the birth year is less than 1900, then display the result for that creator as “Born pre-1900”.\n# If the birth year is greater than or equal to 1900, then display “Born post-1900”.\n# If none of these conditions apply, then simply display “NA”.\n# Make sure your results return an unduplicated list of the names of the creators and also order your results by ascending order of birth year value.\nSELECT DISTINCT ?crn ?bYear ?result\nWHERE {\n ?c a :Looney_Tunes_Character;\n    :created_by ?cr .\n  ?cr :born_on ?b ;\n      :name ?crn .\n  \n  BIND (year(?b) as ?bYear) .\n  \n  BIND (\n    COALESCE (\n      IF (?bYear < 1900, \"Born pre-1900\", 1/0),\n      IF (?bYear >= 1900, \"Born post-1900\", 1/0),\n      \"NA\"\n    ) as ?result\n  )\n}\nORDER BY ASC(?bYear)\n\n# 18. Catchphrase mania: Working with OPTIONAL matches\nSELECT ?n ?kfc\nWHERE {\n ?c a :Looney_Tunes_Character ;\n    :name ?n .\n  \n  OPTIONAL {\n    ?c :known_for_catchphrase ?kfc\n  }\n}\n\n# 19. The list of the names of the Looney_Tunes_Character and their caractors (as a single stacked list) (UNION)\nSELECT ?n\nWHERE {\n  {\n    ?c a :Looney_Tunes_Character ;\n       :name ?n .\n  }\n  UNION\n  {\n    ?c a :Person ;\n       :name ?n .\n  }\n}\nORDER BY ASC(?n)\n\n# 20. Compose and run a SPARQL query to list all the date values stored in the graph and order the results in descending order.\n# Should there be any duplicate values in the results, modify to query to ensure that only distinct values are listed.\nSELECT ?dYear\nWHERE {\n  {\n    ?c a :Short ;\n       :release_date ?d .\n  }\n  UNION\n  {\n    ?c a :Person ;\n       :born_on ?d .\n  }\n  UNION\n  {\n    ?c a :Person ;\n       :died_on ?d .\n  }\n  \n  BIND (year(?d) as ?dYear)\n}\nORDER BY DESC(?dYear)\n\n# 21. Excluding results using the MINUS clause\nSELECT ?n\nWHERE {\n  ?c a :Looney_Tunes_Character ;\n     :name ?n .\n  \n  MINUS {\n    ?c :name \"Tasmanian Devil\"\n  }\n}\nORDER BY ASC(?n)\n\n# 22. Counting and grouping the number of personality traits for each character.\n# What is the count of recorded personality_trait for each of our Looney_Tunes_Character?\nSELECT ?n (COUNT (?pt) AS ?ptCount)\nWHERE {\n  ?c :personality_trait ?pt ;\n     :name ?n\n}\nGROUP BY ?n\n\n# 23. I am who I am: The DESCRIBE query\n# insert data\nINSERT DATA {\n  :Daffy_Duck :reval_of :Bugs_Bunny .\n  :Taz :enemy_of :Daffy_Duck .\n}\n# get outgoing data from Bugs_Bunny\nSELECT *\nWHERE {\n  :Bugs_Bunny ?p ?o\n}\n# get incoming data for Bugs_Bunny\nSELECT *\nWHERE {\n  ?s ?p :Bugs_Bunny\n}\n# DESCRIBE\nDESCRIBE :Bugs_Bunny\n\n# 24. Truth or hare: The ASK query\nASK {\n  :Sylvester :created_by ?cb .\n  ?cb :name \"Isadore Freleng\"\n}\n\n# 25. Buid custom sub-graphs on the fly (CONSTRUCT)\nCONSTRUCT {\n  ?p :has_age ?age ;\n    :birth_date ?b\n}\nWHERE {\n  ?p a :Person ;\n    :born_on ?b ;\n    :died_on ?d .\n\n  BIND (year(?b) AS ?bYear) .\n  BIND (year(?d) AS ?dYear) .\n  BIND (?dYear - ?bYear AS ?age)\n}\n\n# 26. Return all the triples involving the two predicates (VALUES)\n# using FILTER\nSELECT ?s ?p ?o\nWHERE {\n  ?s ?p ?o .\n  \n  FILTER (?p = :reval_of || ?p = :knows)\n}\n# using VALUES\nSELECT DISTINCT ?s ?p ?o\nWHERE {\n  VALUES ?p { :reval_of :knows }\n  \n  ?s ?p ?o\n}\n\n# 27. Select all from the specific graph where object is iri\nSELECT *\nFROM mfg:My_Favourites_Graph\nWHERE {\n  ?s ?p ?o .\n  \n  FILTER (isIRI(?o))\n}"
  }
]